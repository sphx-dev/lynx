import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../store"
import axios from "axios"

export interface OrderBookState {
  bids: any
  asks: any
  status: "idle" | "loading" | "failed"
}

const initialState: OrderBookState = {
  bids: [],
  asks: [],
  status: "idle",
}

// dispatch(getOrderBook())
export const getOrderBook = createAsyncThunk(
  "orderbook/getOrderBook",
  async () => {
    const response = await axios.get("http://localhost:23336/order_book")
    // fetch data
    // const response = await fetchCount(amount)
    // The value we return becomes the `fulfilled` action payload
    return response.data
    // return response.data
    // return null
  },
)

export const orderBookSlice = createSlice({
  name: "orderbook",
  initialState,
  reducers: {
    clear: (state) => {
      state.bids = []
      state.asks = []
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getOrderBook.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getOrderBook.fulfilled, (state, action) => {
        state.status = "idle"
        state.bids = action.payload.bids
        state.asks = action.payload.asks
      })
      .addCase(getOrderBook.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { clear } = orderBookSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const orderBook = (state: RootState) => state.orderBook

export default orderBookSlice.reducer
