import { createAsyncThunk, createSlice, createAction } from "@reduxjs/toolkit"
import axios from "axios"
import { RootState } from "src/state/store"
import { API_URL } from "../../constants"

export interface AccountState {
  id: any
  balance: Number
  closedOrders: []
  openOrders: []
  status: "idle" | "loading" | "failed"
}

const initialState: AccountState = {
  id: null,
  balance: 0,
  closedOrders: [],
  openOrders: [],
  status: "idle",
}

// dispatch(getAccount())
export const getAccount = createAsyncThunk("account/getAccount", async () => {
  const opts = {
    headers: {
      "Content-Type": "application/json",
    },
    withCredentials: true,
  }
  const response = await axios.get(`${API_URL}/accounts/current`, opts)
  return response.data
})

export const updateAccount = createAction<any>("account/updateAccount")

export const accountSlice = createSlice({
  name: "account",
  initialState,
  reducers: {
    clear: (state) => {
      state.id = null
      state.balance = 0
      state.closedOrders = []
      state.openOrders = []
    },
    update: (state, action) => {
      console.log("ACTION: ", action)
      state.id = action.payload.account.Id
      state.balance = action.payload.account.Balance
      state.openOrders = action.payload.account.OpenOrders
      state.closedOrders = action.payload.account.ClosedOrders
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAccount.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getAccount.fulfilled, (state, action) => {
        state.id = action.payload.account.Id
        state.balance = action.payload.account.Balance
        state.openOrders = action.payload.account.OpenOrders
        state.closedOrders = action.payload.account.ClosedOrders
        state.status = "idle"
      })
      .addCase(getAccount.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { clear, update } = accountSlice.actions
export const account = (state: RootState) => state.account
export default accountSlice.reducer
