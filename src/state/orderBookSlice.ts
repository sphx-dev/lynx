import { createSlice } from "@reduxjs/toolkit";
import { RootState } from "./store";
import { orderBookApi } from "../utils/api/orderBookApi";
import { OrderWithDepth } from "../types/orderBook";
import { pipe } from "../utils/pipe";
import {
  addDepths,
  addTotalSums,
  formatToNumbers,
  getPercentage,
  getSpread,
  sortByPrice,
} from "../sections/orderbook/helpers";

export interface OrderBookState {
  bids: OrderWithDepth[];
  asks: OrderWithDepth[];
  spread: number;
  percentage: number;
  status: "idle" | "loading" | "failed";
}

const initialState: OrderBookState = {
  bids: [],
  asks: [],
  status: "idle",
  spread: 0,
  percentage: 0,
};

export const orderBookSlice = createSlice({
  name: "orderbook",
  initialState,
  reducers: {
    clear: state => {
      state.bids = [];
      state.asks = [];
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addMatcher(orderBookApi.endpoints.getOrderBook.matchPending, state => {
        state.status = "loading";
      })
      .addMatcher(
        orderBookApi.endpoints.getOrderBook.matchFulfilled,
        (state, { payload }) => {
          state.status = "idle";
          const bids = pipe(
            payload.bids,
            formatToNumbers,
            addTotalSums,
            addDepths,
            sortByPrice
          );
          const asks = pipe(
            payload.asks,
            formatToNumbers,
            addTotalSums,
            addDepths,
            sortByPrice
          );

          state.bids = bids;
          state.asks = asks;
          const spread = getSpread(bids, asks);
          state.spread = spread;
          state.percentage = getPercentage(bids, asks, spread);
        }
      )
      .addMatcher(orderBookApi.endpoints.getOrderBook.matchRejected, state => {
        state.status = "failed";
      });
  },
});

export const { clear } = orderBookSlice.actions;
export const orderBook = (state: RootState) => state.orderBook;
export default orderBookSlice.reducer;
