import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../store"
import axios from "axios"

export interface AccountState {
  account: any
  status: "idle" | "loading" | "failed"
}

const initialState: AccountState = {
  account: null,
  status: "idle",
}

// dispatch(getAccount())
export const getAccount = createAsyncThunk("account/getAccount", async () => {
  const response = await axios.get("http://localhost:8080/accounts/current")
  // The value we return becomes the `fulfilled` action payload
  // console.log(response.data)
  return response.data
})

export const accountSlice = createSlice({
  name: "account",
  initialState,
  reducers: {
    clear: (state) => {
      state.account = null
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAccount.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getAccount.fulfilled, (state, action) => {
        state.status = "idle"
        state.account = action.payload.account
        console.log(state.account)
      })
      .addCase(getAccount.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { clear } = accountSlice.actions
export const account = (state: RootState) => state.account
export default accountSlice.reducer
