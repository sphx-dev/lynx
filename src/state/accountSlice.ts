import {
  createAsyncThunk,
  createSlice,
  PayloadAction,
} from "@reduxjs/toolkit";
import { RootState } from "./store";
import { baseAxios } from "../utils/axios";
import {AccountResponse, Order, OrderResponse} from "../types/order";
import axios from "axios";
import {API_URL} from "../constants";

export interface AccountState {
  id: string | null;
  balance: String;
  closedOrders: Order[];
  openOrders: Order[];
  status: "idle" | "loading" | "failed";
}

const initialState: AccountState = {
  id: null,
  balance: "0",
  closedOrders: [],
  openOrders: [],
  status: "idle",
};

export const removeOrder = createAsyncThunk(
  "account/removeOrder",
  async (orderId: string) => {
    try {
      const response = await baseAxios.delete(
        `/order/${orderId}?ticker=BTCUSDT.P`
      );
      return response.data;
    } catch (error) {
      throw error;
    }
  }
);

// dispatch(getAccount())
export const getAccount = createAsyncThunk("account/getAccount", async () => {
  const response = await baseAxios("/accounts/current");
  return response.data;
});

const updateAccount = (
  state: AccountState,
  action: PayloadAction<OrderResponse>
) => {
  state.id = action.payload.account.id;
  state.balance = action.payload.account.balance;
  state.openOrders = action.payload.account.open_orders || [];
  state.closedOrders = action.payload.account.closed_orders || [];
};

export const accountSlice = createSlice({
  name: "account",
  initialState,
  reducers: {
    clear: (state) => {
      state = initialState;
    },
    update: (state, action) => {
      state.id = action.payload.id;
      state.balance = action.payload.balance;
      state.openOrders = action.payload.open_orders || [];
      state.closedOrders = action.payload.closed_orders || [];
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAccount.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAccount.fulfilled, (state, action) => {
        state.id = action.payload.account.id;
        state.balance = action.payload.account.balance;
        state.openOrders = action.payload.account.open_orders || [];
        state.closedOrders = action.payload.account.closed_orders || [];
        state.status = "idle";
      })
      .addCase(getAccount.rejected, (state) => {
        state.status = "failed";
      })
      .addCase(removeOrder.fulfilled, updateAccount);
  },
});

export const { clear, update } = accountSlice.actions;
export const account = (state: RootState) => state.account;
export default accountSlice.reducer;
