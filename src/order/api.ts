import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../store"
import axios from "axios"

export interface OrderState {
  id: any
  balance: Number
  closedOrders: []
  openOrders: []
  status: "idle" | "loading" | "failed"
}

const initialState: OrderState = {
  id: null,
  balance: 0,
  closedOrders: [],
  openOrders: [],
  status: "idle",
}

// dispatch(getOrder())
export const getOrder = createAsyncThunk("order/getOrders", async () => {
  const opts = {
    headers: {
      "Content-Type": "application/json",
    },
    withCredentials: true,
  }
  const response = await axios.get("http://127.0.0.1:8080/orders/current", opts)
  return response.data
})

export const placeLimitOrder = createAsyncThunk(
  "order/placeLimitOrder",
  async (data) => {
    console.log("DATA: ")
    console.log(data)
    const body = {
      price: 83,
      volume: 10,
      isBuy: true,
    }
    const opts = {
      withCredentials: true,
    }
    const response = await axios.post(
      "http://127.0.0.1:8080/order/limit",
      body,
      opts,
    )
    console.log(response.data)
    return response.data
  },
)

export const orderSlice = createSlice({
  name: "order",
  initialState,
  reducers: {
    clear: (state) => {
      state.id = null
      state.balance = 0
      state.closedOrders = []
      state.openOrders = []
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getOrder.pending, (state) => {
        state.status = "loading"
      })
      .addCase(getOrder.fulfilled, (state, action) => {
        state.id = action.payload.order.Id
        state.balance = action.payload.order.Balance
        state.openOrders = action.payload.order.OpenOrders
        state.closedOrders = action.payload.order.ClosedOrders
        state.status = "idle"
      })
      .addCase(getOrder.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { clear } = orderSlice.actions
export const order = (state: RootState) => state.account
export default orderSlice.reducer
