import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { RootState, AppThunk } from "../store"
import { useAppDispatch } from "../hooks"
import axios from "axios"
import { API_URL } from "../constants"

export interface OrderState {
  done: Array<any>
  order: Object
  partialOrder: Object
  quantityProcessed: Number | null
  status: "idle" | "loading" | "failed"
}

const initialState: OrderState = {
  done: [],
  order: {},
  partialOrder: {},
  quantityProcessed: null,
  status: "idle",
}

// dispatch(getOrder())
export const getOrder = createAsyncThunk("order/getOrders", async () => {
  const opts = {
    headers: {
      "Content-Type": "application/json",
    },
    withCredentials: true,
  }
  const response = await axios.get(`${API_URL}/orders/current`, opts)
  return response.data
})

export const placeLimitOrder = createAsyncThunk(
  "order/placeLimitOrder",
  async (data: any) => {
    console.log("DATA: ")
    console.log(data)
    const body = {
      price: data?.price,
      volume: data?.volume,
      isBuy: true,
    }
    const opts = {
      withCredentials: true,
    }
    const response = await axios.post(`${API_URL}/order/limit`, body, opts)
    console.log(response.data)
    return response.data
  },
)

export const orderSlice = createSlice({
  name: "order",
  initialState,
  reducers: {
    clear: (state) => {
      state.done = []
      state.order = {}
      state.partialOrder = {}
      state.quantityProcessed = null
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(placeLimitOrder.pending, (state) => {
        state.status = "loading"
      })
      .addCase(placeLimitOrder.fulfilled, (state, action) => {
        state.done = action.payload.done
        state.order = action.payload.order
        state.partialOrder = action.payload.partialOrder
        state.quantityProcessed = action.payload.quantityProcessed
        state.status = "idle"
      })
      .addCase(placeLimitOrder.rejected, (state) => {
        state.status = "failed"
      })
  },
})

export const { clear } = orderSlice.actions
export const order = (state: RootState) => state.account
export default orderSlice.reducer
