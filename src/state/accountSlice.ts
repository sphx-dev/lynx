import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "./store";
import { baseAxios } from "../utils/axios";
import { Account, Position } from "../types/order";
import { accountApi, AccountResponse } from "../utils/api/accountApi";

export interface AccountState extends Omit<Account, "id"> {
  id: string | null;
  status: "idle" | "loading" | "failed";
  positions: Position[];
}

const initialState: AccountState = {
  id: null,
  balance: "0",
  closedOrders: [],
  openOrders: [],
  status: "idle",
  positions: [],
};

export const getAccount = createAsyncThunk("account/getAccount", async () => {
  const response = await baseAxios("/accounts/current");
  return response.data;
});

export const accountSlice = createSlice({
  name: "account",
  initialState,
  reducers: {
    clear: state => {
      state = initialState;
    },
  },

  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      .addMatcher(accountApi.endpoints.getAccount.matchPending, state => {
        state.status = "loading";
      })
      .addMatcher(
        accountApi.endpoints.getAccount.matchFulfilled,
        (state, { payload }: PayloadAction<AccountResponse>) => {
          return {
            ...state,
            status: "idle",
            ...payload.account,
            positions: payload.positions,
          };
        }
      );
  },
});

export const { clear } = accountSlice.actions;
export const account = (state: RootState) => state.account;
export default accountSlice.reducer;
